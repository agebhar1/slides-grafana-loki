---
x-common: &labels
  hostname: ${HOSTNAME}
  io.prometheus/scrape: true
  io.github.agebhar1.project: observability

services:
  postgres:
    image: postgres:17.6
    volumes:
      - ${POSTGRES_DATA:-postgres_data}:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: grafana
    ports:
      - 5432:5432
    user: ${POSTGRES_USER:-root}
    healthcheck:
      test: pg_isready -U postgres
      interval: 1m30s
      timeout: 5s
      # -- requires Docker Engine >= v25 --
      start_period: 30s
      start_interval: 2s
    labels:
      io.github.agebhar1.project: observability

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.17.1
    environment:
      DATA_SOURCE_URI: postgres:5432/grafana?sslmode=disable
      DATA_SOURCE_USER: postgres
      DATA_SOURCE_PASS: secret
    labels:
      <<: *labels

  prometheus:
    image: prom/prometheus:v3.6.0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./etc/prometheus:/etc/prometheus:ro
      - ${PROMETHEUS_DATA:-prometheus_data}:/var/lib/prometheus
    command:
      - --config.file=/etc/prometheus/config.yml
      - --storage.tsdb.path=/var/lib/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    ports:
      - 9090:9090
    user: ${PROMETHEUS_USER:-65534}:${DOCKER_GID:-65534}
    restart: unless-stopped
    labels:
      <<: *labels

  grafana:
    image: grafana/grafana:12.2.0
    volumes:
      - ./etc/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      # [security]
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: s3cr3t
      # [database]
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_USER: postgres
      GF_DATABASE_PASSWORD: secret
      GF_DATABASE_LOG_QUERIES: ${GF_DATABASE_LOG_QUERIES:-false}
    ports:
      - 3000:3000
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    restart: unless-stopped
    labels:
      <<: *labels

  loki:
    image: grafana/loki:2.9.15
    volumes:
      - ./etc/loki/config.yml:/etc/loki/config.yml:ro
      - ${LOKI_DATA:-loki_data}:/var/lib/loki
    command:
      - -config.file=/etc/loki/config.yml
      - -log.level=${LOKI_LOG_LEVEL:-info}
    ports:
      - 3100:3100
    user: ${LOKI_USER:-10001:10001}
    restart: unless-stopped
    labels:
      <<: *labels

  minio:
    image: minio/minio:RELEASE.2025-09-07T16-13-09Z
    volumes:
      - ${MINIO_DATA:-minio_data}:/data
    environment:
      MINIO_PROMETHEUS_AUTH_TYPE: public
      MINIO_PROMETHEUS_URL: http://prometheus:9090
      MINIO_PROMETHEUS_JOB_ID: containers
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: minios3cr3t
    command:
      - server
      - /data
      - --console-address=:9001
    ports:
      - 9000:9000
      - 9001:9001
    user: ${MINIO_USER}:${DOCKER_GID}
    restart: unless-stopped
    healthcheck:
      test: mc ready local/
      interval: 1m30s
      timeout: 5s
      # -- requires Docker Engine >= v25 --
      start_period: 30s
      start_interval: 2s
    labels:
      <<: *labels
      io.prometheus/port: 9000
      io.prometheus/path: /minio/v2/metrics/cluster

  # https://grafana.com/docs/grafana-cloud/quickstart/docker-compose-linux/

  promtail:
    image: grafana/promtail:2.9.15
    volumes:
      - ./etc/promtail/config.yml:/etc/promtail/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log/journal/:/var/log/journal/:ro
      - /run/log/journal/:/run/log/journal/:ro
      - ${LOGFILES:-./var/log}:/mnt/log:ro
      - promtail_data:/var/lib/promtail
    ports:
      - 9080:9080
    restart: unless-stopped
    labels:
      <<: *labels
      io.prometheus/port: 9080

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.52.1
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    ports:
      - 8080:8080
    restart: unless-stopped
    labels:
      <<: *labels

volumes:
  postgres_data:
  prometheus_data:
  promtail_data:
  loki_data:
  minio_data:
